import 'dart:async';

import 'package:breaking_bapp/data_source.dart';
import 'package:breaking_bapp/presentation/scene/character/list/character_list_states.dart';
import 'package:rxdart/rxdart.dart';

class CharacterListBloc {
  CharacterListBloc() {
    // We call "listen" twice in this BLoC, so we have two subscriptions. In
    // order to manage them together, we add both to a `CompositeSubscription`.
    _subscriptions
      // The '..' syntax is a Dart feature called cascade notation.
      // Further reading: https://dart.dev/guides/language/language-tour#cascade-notation-
      ..add(
        _fetchCharacterSummaryList().listen(_onNewStateController.add),
      )
      ..add(
        _onTryAgainController.stream
            // The flatMap function "switches" every emission of the
            // _onTryAgainController to a new Stream generated by the
            // _fetchCharacterSummaryList function.
            .flatMap((_) => _fetchCharacterSummaryList())
            .listen(_onNewStateController.add),
      );
  }

  final _subscriptions = CompositeSubscription();

  final _onTryAgainController = StreamController<void>();

  Sink<void> get onTryAgain => _onTryAgainController.sink;

  final _onNewStateController =
      BehaviorSubject<CharacterListResponseState>.seeded(Loading());

  Stream<CharacterListResponseState> get onNewState =>
      _onNewStateController.stream;

  // We're creating a new Stream inside this function using a Dart feature
  // named generator functions. Further reading:
  // https://dart.dev/guides/language/language-tour#generators
  Stream<CharacterListResponseState> _fetchCharacterSummaryList() async* {
    yield Loading();

    try {
      yield Success(
        await DataSource.getCharacterList(),
      );
    } catch (e) {
      yield Error();
    }
  }

  void dispose() {
    // We need to close every instance of `StreamController`.
    _onTryAgainController.close();
    _onNewStateController.close();
    _subscriptions.dispose();
  }
}
